import os
import json
import requests
from telegram import Update, InputFile
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackContext
from telegram.ext import filters  # ‡§Ø‡§π‡§æ‡§Å 'filters' ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç
from bs4 import BeautifulSoup

TOKEN = "YOUR_BOT_TOKEN"
ADMINS = [123456789]

# ... (‡§¨‡§æ‡§ï‡•Ä ‡§ï‡•ã‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü ‡§π‡•à)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("addcoins", add_coins))
    
    # ‡§Ö‡§™‡§°‡•á‡§ü‡•á‡§° MessageHandler (filters ‡§ï‡§æ ‡§®‡§Ø‡§æ ‡§∏‡§ø‡§Ç‡§ü‡•à‡§ï‡•ç‡§∏)
    dp.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    dp.add_handler(MessageHandler(filters.REPLY, handle_admin_reply))

    updater.start_polling()
    updater.idle()

# ------------------ ‡§°‡•á‡§ü‡§æ ‡§Æ‡•à‡§®‡•á‡§ú‡§Æ‡•á‡§Ç‡§ü ------------------
def load_user_data():
    try:
        with open(USER_DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {"users": {}, "reply_map": {}}

def save_user_data(data):
    with open(USER_DATA_FILE, "w") as f:
        json.dump(data, data, indent=4)

# ------------------ ‡§ü‡•á‡§∞‡•á‡§¨‡•â‡§ï‡•ç‡§∏ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° (‡§´‡§ø‡§ï‡•ç‡§∏‡•ç‡§° ‡§≤‡•â‡§ú‡§ø‡§ï) ------------------
def download_terabox(url: str) -> str:
    try:
        # ‡§∏‡•ç‡§ü‡•á‡§™ 1: ‡§ü‡•á‡§∞‡•á‡§¨‡•â‡§ï‡•ç‡§∏ ‡§™‡•á‡§ú ‡§™‡§æ‡§∞‡•ç‡§∏ ‡§ï‡§∞‡•á‡§Ç
        response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # ‡§∏‡•ç‡§ü‡•á‡§™ 2: ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã URL ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç (‡§®‡§Ø‡§æ ‡§´‡§ø‡§ï‡•ç‡§∏‡•ç‡§° ‡§≤‡•â‡§ú‡§ø‡§ï)
        script_tag = soup.find('script', text=lambda t: 'video_url' in str(t))
        if not script_tag:
            return None
        
        # JSON ‡§°‡•á‡§ü‡§æ ‡§è‡§ï‡•ç‡§∏‡§ü‡•ç‡§∞‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
        script_text = script_tag.string
        video_url = script_text.split('video_url":"')[1].split('"')[0].replace('\\', '')
        
        # ‡§∏‡•ç‡§ü‡•á‡§™ 3: ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
        filename = "video.mp4"
        with requests.get(video_url, stream=True) as r:
            r.raise_for_status()
            with open(filename, 'wb') as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
        return filename
    except Exception as e:
        print(f"Download Error: {e}")
        return None

# ------------------ ‡§¨‡•â‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ------------------
def start(update: Update, context: CallbackContext):
    update.message.reply_text("üì§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ Terabox ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡•á‡§Ç!")

def add_coins(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in ADMINS:
        return

    try:
        target_user = int(context.args[0])
        coins = int(context.args[1])
        data = load_user_data()
        if str(target_user) not in data["users"]:
            data["users"][str(target_user)] = {"downloads": 0, "coins": 0}
        data["users"][str(target_user)]["coins"] += coins
        save_user_data(data)
        update.message.reply_text(f"‚úÖ {coins} ‡§ï‡•â‡§á‡§® ‡§Ø‡•Ç‡§ú‡§∞ {target_user} ‡§ï‡•ã ‡§¶‡§ø‡§è ‡§ó‡§è!")
    except:
        update.message.reply_text("‚ö†Ô∏è ‡§Ø‡•Ç‡§ú‡§º: /addcoins <user_id> <coins>")

# ------------------ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§π‡•à‡§Ç‡§°‡§≤‡§ø‡§Ç‡§ó ------------------
def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    url = update.message.text
    data = load_user_data()

    # ‡§®‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§∞ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç
    if str(user_id) not in data["users"]:
        data["users"][str(user_id)] = {"downloads": 0, "coins": 0}
        save_user_data(data)

    # ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú ‡§´‡•â‡§∞‡§µ‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç
    for admin_id in ADMINS:
        context.bot.send_message(
            admin_id,
            f"üì© ‡§Ø‡•Ç‡§ú‡§∞ {user_id} ‡§®‡•á ‡§≠‡•á‡§ú‡§æ:\n\n{url}"
        )

    # ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏
    if "terabox.com" in url:
        user_data = data["users"][str(user_id)]
        
        # ‡§´‡•ç‡§∞‡•Ä ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° (‡§™‡§π‡§≤‡•á 4)
        if user_data["downloads"] < 4:
            update.message.reply_text("‚ö° ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")
            filename = download_terabox(url)
            if filename:
                with open(filename, 'rb') as f:
                    update.message.reply_video(video=f)
                os.remove(filename)
                user_data["downloads"] += 1
                save_user_data(data)
            else:
                update.message.reply_text("‚ùå ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§µ‡§ø‡§´‡§≤! ‡§≤‡§ø‡§Ç‡§ï ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§")
        
        # ‡§ï‡•â‡§á‡§® ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ (4 ‡§ï‡•á ‡§¨‡§æ‡§¶)
        else:
            if user_data["coins"] > 0:
                user_data["coins"] -= 1  # 1 ‡§ï‡•â‡§á‡§® ‡§ï‡§ü‡•á‡§ó‡§æ
                save_user_data(data)
                filename = download_terabox(url)
                if filename:
                    with open(filename, 'rb') as f:
                        update.message.reply_video(video=f)
                    os.remove(filename)
                else:
                    update.message.reply_text("‚ùå ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§µ‡§ø‡§´‡§≤! ‡§≤‡§ø‡§Ç‡§ï ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§")
            else:
                update.message.reply_text(
                    "‚ö†Ô∏è ‡§ï‡•â‡§á‡§® ‡§ñ‡§§‡•ç‡§Æ! ‡§è‡§°‡§Æ‡§ø‡§® ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§\n"
                    f"Admin ID: @{context.bot.get_chat(ADMINS[0]).username}"
                )
    else:
        update.message.reply_text("‚ùå ‡§ó‡§≤‡§§ ‡§≤‡§ø‡§Ç‡§ï! ‡§∏‡§ø‡§∞‡•ç‡§´ Terabox ‡§≤‡§ø‡§Ç‡§ï ‡§ö‡§≤‡•á‡§Ç‡§ó‡•á‡•§")

# ------------------ ‡§è‡§°‡§Æ‡§ø‡§® ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ------------------
def handle_admin_reply(update: Update, context: CallbackContext):
    if update.message.from_user.id not in ADMINS:
        return

    replied_msg = update.message.reply_to_message
    if replied_msg:
        admin_text = update.message.text
        user_id = replied_msg.text.split("‡§Ø‡•Ç‡§ú‡§∞ ")[1].split(" ‡§®‡•á")[0]
        context.bot.send_message(user_id, f"üì¨ ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨:\n\n{admin_text}")

# ------------------ ‡§Æ‡•á‡§® ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ------------------
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("addcoins", add_coins))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(MessageHandler(Filters.reply, handle_admin_reply))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    # ‡§™‡§π‡§≤‡•Ä ‡§¨‡§æ‡§∞ ‡§∞‡§® ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ user_data.json ‡§¨‡§®‡§æ‡§è‡§Å
    if not os.path.exists(USER_DATA_FILE):
        save_user_data({"users": {}, "reply_map": {}})
    main()